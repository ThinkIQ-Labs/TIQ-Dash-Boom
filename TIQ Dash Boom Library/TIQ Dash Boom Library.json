{
    "meta": {
        "file_version": "4.0.2",
        "database_name": "sprint",
        "export_timestamp": "2024-05-29T21:29:35.731121+00:00",
        "export_library_fqn": [
            "tiq_dash_boom_library"
        ],
        "database_schema_version": "4.9.0"
    },
    "types": [
        {
            "fqn": [
                "thinkiq_base_library",
                "object"
            ],
            "scripts": [],
            "document": null,
            "attributes": [],
            "importance": 10,
            "description": "Base type of all types.",
            "edit_status": 1,
            "display_name": "Generic Object",
            "opcua_methods": [],
            "relative_name": "object",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": null,
            "access_group_ids": null,
            "updated_timestamp": "2023-03-22T02:15:34.389347+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "current_value"
            ],
            "scripts": [
                {
                    "run": false,
                    "owner": "GregorVilkner",
                    "script": "<script type=\"text\/x-template\" id=\"live-value-component-template\">\r\n    <div style=\"height:100%; position:relative;\">\r\n        \r\n        <div v-if=\"showConfigCog\" style=\"position:absolute;top:0;right:3px;cursor:pointer;z-index:99;\">\r\n            <button type=\"button\" class=\"btn btn-sm btn-link\"  data-bs-toggle=\"modal\" :data-bs-target=\"`#modal_${id}`\">\r\n                <i class=\"fa-solid fa-cog\" :style=\"{color: configComplete ? 'green' : 'red'}\"><\/i>\r\n            <\/button>\r\n        <\/div>\r\n\r\n        <div v-if=\"currentVST!=null\">\r\n            Value: {{currentVST.v}}<br \/>\r\n            TS: {{currentVST.t}}<br \/>\r\n            Status: {{currentVST.s}}<br \/>\r\n        <\/div>\r\n\r\n        <!-- Modal -->\r\n        <div class=\"modal\" :id=\"`modal_${id}`\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Attribute Id Configuration<\/h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"><\/button>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"attrIdSelector\">Attribute Id<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenAttrId\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Dismis + Close<\/button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" @click=\"SaveChoices\">Save + Close<\/button>\r\n                    <\/div>\r\n                <\/div>\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>\r\n<\/script>\r\n\r\n<script>\r\n    var WinDoc = window.document;\r\n\r\n    var liveValueComponent = {\r\n        template: '#live-value-component-template',\r\n        props: ['id', 'config', 'subscriptions', 'showConfigCog'],\r\n        data() {\r\n            return { \r\n                configComplete: false,\r\n                choosenAttrId: '',\r\n                currentVST: null\r\n            }\r\n        },\r\n        watch: {\r\n            subscriptions: function(newValue, oldValue){\r\n                \/\/ console.log('subscriptions change:', newValue, oldValue);\r\n                this.currentVST = newValue.currentVST;\r\n            }\r\n        },\r\n        mounted: async function(){\r\n            \r\n            this.choosenAttrId = this.config.attrId;\r\n\r\n            this.configComplete = this.CheckConfigIsComplete();\r\n\r\n        },\r\n        methods: {\r\n            CheckConfigIsComplete: function(){\r\n\r\n                if(this.choosenAttrId == '') return false;\r\n\r\n                this.$emit('update-subscriptions', {\r\n                    [this.id]:{\r\n                        attrIds: [this.choosenAttrId],\r\n                        subscriptionProps: ['currentVST']\r\n                    }\r\n                });\r\n\r\n                return true;\r\n            },\r\n            HideModal: function() {\r\n                $(`#modal_${this.id}`).modal('hide');\r\n            },\r\n            SaveChoices: function(){\r\n                this.$emit('on-save', {\r\n                    id: this.id,\r\n                    config: {\r\n                        attrId: this.choosenAttrId,\r\n                    }\r\n                });\r\n                this.HideModal();\r\n                this.configComplete = this.CheckConfigIsComplete();\r\n            },\r\n        }\r\n    }\r\n<\/script>",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": null,
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Component Template",
                    "relative_name": "component_template",
                    "initial_inputs": {
                        "start_timestamp": "2023-12-06T17:05:10.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "max_acceptable_run_secs": 0,
                    "use_outputs_from_last_run": false
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "enumeration",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 20,
                    "description": "Allows categorizing of widgets to group them in the UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Category",
                    "default_value": null,
                    "relative_name": "category",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:47.092286+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": [
                        "tiq_dash_boom_library",
                        "widget_categories"
                    ],
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": [
                        "Layouting",
                        "Charting",
                        "Media",
                        "HMI"
                    ],
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 30,
                    "description": "The Config Value is used on the type to specify the name of the vue component to be registered with the dashboard UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Component Name",
                    "default_value": "liveValueComponent",
                    "relative_name": "component_name",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:57.186141+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": "fa-light fa-dice-one",
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "The attribute id to be rendered using a current value component.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:attrId",
                    "default_value": null,
                    "relative_name": "config_colon_attrid",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 70,
                    "description": "The height of a widget (rows).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "H",
                    "default_value": null,
                    "relative_name": "h",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:22.109454+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": "fa-light fa-dice-one",
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "The Config Value is used on the type to specify the label and icon to be used for the dashboard UI button to add a new widget of this type.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Label",
                    "default_value": "Current Value",
                    "relative_name": "label",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 60,
                    "description": "The width of a widget instance (columns).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "W",
                    "default_value": null,
                    "relative_name": "w",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:17.064015+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 40,
                    "description": "The x location (column, left to right) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "X",
                    "default_value": null,
                    "relative_name": "x",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:06.50753+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 50,
                    "description": "The y location (row, from the top down) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Y",
                    "default_value": null,
                    "relative_name": "y",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:12.296831+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "Current Value",
            "opcua_methods": [],
            "relative_name": "current_value",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "tiq_dash_boom_library",
                "widget"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "dashboard"
            ],
            "scripts": [
                {
                    "run": false,
                    "owner": "GregorVilkner",
                    "script": "<?php\r\n    use Joomla\\CMS\\HTML\\HTMLHelper;\r\n\r\n    $primary_domain = 'https:\/\/' . $_SERVER['HTTP_HOST'];\r\n\r\n    HTMLHelper::_('script', \"$primary_domain\/media\/com_thinkiq\/js\/dist\/tiq.core.js\", array('version' => 'auto', 'relative' => false, 'detectDebug' => false));\r\n    \/\/ HTMLHelper::_('script', \"$primary_domain\/media\/com_thinkiq\/js\/dist\/tiq.tiqGraphQL.js\", array('version' => 'auto', 'relative' => false, 'detectDebug' => false));\r\n    HTMLHelper::_('script', \"$primary_domain\/media\/com_thinkiq\/js\/dist\/tiq.components.js\", array('version' => 'auto', 'relative' => false, 'detectDebug' => false));\r\n    \/\/ HTMLHelper::_('script', \"$primary_domain\/media\/com_thinkiq\/js\/dist\/tiq.charts.js\", array('version' => 'auto', 'relative' => false, 'detectDebug' => false));\r\n\r\n    require_once 'thinkiq_context.php';\r\n    $context = new Context();\r\n\r\n    TiqUtilities\\Model\\Script::includeScript('tiq_dash_boom_library.dashboard_js_sdk');\r\n\r\n    use TiqUtilities\\Model\\Script;\r\n    use TiqUtilities\\Model\\Node;\r\n    use TiqUtilities\\Model\\Type;\r\n    use TiqUtilities\\Model\\EnumerationType;\r\n\r\n    \/\/ load tab title\r\n    $aHostId = $context->std_inputs->node_id;\r\n    if($aHostId==0){\r\n        $tabTitle = \"Tab Title\";\r\n        $pageTitle = \"Page Title\";\r\n    } else {\r\n        $aHost = new Node($aHostId);\r\n        $aHost->getAttributes();\r\n        $tabTitle = $aHost->attributes['tab_title']->string_value;\r\n        $pageTitle = $aHost->attributes['page_title']->string_value;\r\n    }\r\n\r\n    function GetSubtypes($aType){\r\n        $aResponse = Node::GetDb()->run(\"select * from model.types where sub_type_of_id=$aType->id\")->fetchAll();\r\n        $typeList = [];\r\n        foreach($aResponse as $aRecord){\r\n            $aType = new Type($aRecord['id']);\r\n            $typeList[] = $aType;\r\n        }\r\n        return $typeList;\r\n    }\r\n\r\n    function PostgresArrayToPhpArray($postgresArray){\r\n        return (fn () => $this->convertPostgresTypeArray($postgresArray))->call(new Node()); \r\n    }\r\n\r\n\r\n    \/\/ load widgets\r\n    $aWidgetBaseObject = new Type('tiq_dash_boom_library.widget');\r\n    $widgets = GetSubtypes($aWidgetBaseObject);\r\n    $widgetsLight = [];\r\n    foreach($widgets as $aWidget){\r\n        $aWidget->getScripts();\r\n        \/\/ Script::includeScript(\"tiq_dash_boom_library.$aWidget->relative_name.componet_template\");\r\n        Script::includeScript($aWidget->scripts['component_template']->id);\r\n        $aWidget->getAttributes();\r\n        $widgetsLight[] = Array(\r\n            'componentName' => $aWidget->attributes['component_name']->default_string_value, \r\n            'label' => $aWidget->attributes['label']->default_string_value, \r\n            'icon' => $aWidget->attributes['label']->icon,\r\n            'fqn' => PostgresArrayToPhpArray($aWidget->fqn),\r\n            'category' => $aWidget->attributes['category']->default_enumeration_value,\r\n        );\r\n    }\r\n\r\n    \/\/ load categories\r\n    $widgetCategories = new EnumerationType('tiq_dash_boom_library.widget_categories');\r\n?>\r\n\r\n<div id=\"app\">\r\n    <div class=\"offcanvas offcanvas-end\" tabindex=\"-1\" id=\"offcanvasExample\" aria-labelledby=\"offcanvasExampleLabel\" style=\"width:300px;\">\r\n        <div class=\"offcanvas-header\">\r\n            <h5 class=\"offcanvas-title\" id=\"offcanvasExampleLabel\">TIQ Dash Boom<\/h5>\r\n            <button type=\"button\" class=\"btn-close text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"><\/button>\r\n        <\/div>\r\n        <div class=\"offcanvas-body\">\r\n            <h5 class=\"offcanvas-title mt-4 mb-2\" >Dashboard<\/h5>\r\n\r\n            <label>Title:<\/label><br\/>\r\n            <input v-model=\"pageTitle\" class=\"w-100\"\/>\r\n\r\n            <label>Browser Tab Title:<\/label><br\/>\r\n            <input v-model=\"tabTitle\" class=\"w-100\"\/>\r\n\r\n            <h5 class=\"offcanvas-title my-4\" >Widgets<\/h5>\r\n\r\n            <div v-for=\"aWidgetCategory in widgetCategories\">\r\n                <div v-if=\"widgets.filter(x=>x.category==aWidgetCategory).length>0\">\r\n                    <h6>{{aWidgetCategory}}<\/h6>\r\n                    <div v-for=\"aWidget in widgets.filter(x=>x.category==aWidgetCategory)\" class=\"my-2\">\r\n                        <button class=\"btn btn-primary w-100\" @click=\"AddWidget(aWidget)\"><i class=\"me-2\" :class=\"aWidget.icon\" > <\/i>{{aWidget.label}}<\/button>\r\n                    <\/div>    \r\n                <\/div>\r\n            <\/div>\r\n            <div v-if=\"widgets.filter(x=>x.category==null).length>0\">\r\n                <h6>Mavericks<\/h6>\r\n                <div v-for=\"aWidget in widgets.filter(x=>x.category==null)\" class=\"my-2\">\r\n                    <button class=\"btn btn-primary w-100\" @click=\"AddWidget(aWidget)\"><i class=\"me-2\" :class=\"aWidget.icon\" > <\/i>{{aWidget.label}}<\/button>\r\n                <\/div>    \r\n            <\/div>\r\n        <\/div>\r\n        <div class=\"offcanvas-footer\">\r\n            <hr \/>\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n                    <button class=\"btn btn-light w-100\" @click=\"CopyLayoutToClipboard\">Copy Layout to Clipboard<\/button>\r\n                <\/div>\r\n                <div class=\"col\">\r\n                    <button class=\"btn btn-light w-100\" @click=\"PasteLayoutFromClipboard\">Paste Layout from Clipboard<\/button>\r\n                <\/div>\r\n            <\/div>\r\n           <hr \/>\r\n            <button class=\"btn btn-light w-100\" @click=\"SaveDashboardAsync\"><i class=\"me-2 fa-light fa-save\" > <\/i>Save Dashboard<\/buttong>\r\n        <\/div>\r\n    <\/div>\r\n\r\n    <div class=\"row\">            \r\n        <div class=\"col-12\">\r\n            <h1 class=\"pb-2 pt-2\" style=\"font-size:2.5rem; color:#126181;\">\r\n                {{pageTitle}}\r\n\r\n                <span v-if=\"dashboardIsEditMode\" class=\"float-end ms-1  mb-1\" >\r\n                    <button class=\"btn btn-link mb-1\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\" >\r\n                        <i class=\"fa fa-cog\" ><\/i>\r\n                    <\/button>\r\n                <\/span>\r\n\r\n                <span class=\"float-end ms-1  mb-1\" >\r\n                    <button class=\"btn btn-link mb-1\" @click=\"dashboardIsEditMode = !dashboardIsEditMode\">\r\n                        <i v-bind:class=\"dashboardIsEditMode ? 'fa fa-unlock' : 'fa fa-lock'\" data-toggle=\"tooltip\" title=\"Toggle Edit Mode.\"><\/i>\r\n                    <\/button>\r\n                <\/span>\r\n\r\n                <a v-if=\"false\" class=\"float-end btn btn-sm btn-link mt-2\" style=\"font-size:1rem; color:#126181;\" v-bind:href=\"`\/index.php?option=com_modeleditor&view=script&id=${context.std_inputs.script_id}`\" target=\"_blank\">source<\/a>\r\n            <\/h1>\r\n            <hr style=\"border-color:#126181; border-width:medium;\" \/>\r\n        <\/div>   \r\n    <\/div>\r\n\r\n    <div id=\"content\">\r\n        <grid-layout style=\"border:0px solid black;\"\r\n                        ref=\"grid_layout\"\r\n                        :layout.sync=\"layout\"\r\n                        :col-num=\"50\"\r\n                        :row-height=\"20\"\r\n                        :auto-size=\"true\"\r\n                        :is-draggable=\"dashboardIsEditMode\"\r\n                        :is-resizable=\"dashboardIsEditMode\"\r\n                        :use-css-transforms=\"false\"\r\n                        :vertical-compact=\"false\"\r\n                        :prevent-collision=\"true\"\r\n                        @layout-created=\"layoutCreatedEvent\"\r\n                        @layout-before-mount=\"layoutBeforeMountEvent\"\r\n                        @layout-mounted=\"layoutMountedEvent\"\r\n                        @layout-ready=\"layoutReadyEvent\"\r\n                        @layout-updated=\"layoutUpdatedEvent\"\r\n            >\r\n                <grid-item v-for=\"item in layout\"\r\n                            :key=\"item.i\"\r\n                            :componentName=\"item.componentName\"\r\n                            :typeFqn=\"item.typeFqn\"\r\n                            :config=\"item.config\"\r\n                            :i=\"item.i\"\r\n                            :x=\"item.x\"\r\n                            :y=\"item.y\"\r\n                            :w=\"item.w\"\r\n                            :wPx=\"item.wPx\"\r\n                            :h=\"item.h\"\r\n                            :hPx=\"item.hPx\"\r\n                            :moved=\"item.moved\"\r\n                            @resize=\"resizeEvent\"\r\n                            @move=\"moveEvent\"\r\n                            @resized=\"resizedEvent\"\r\n                            @container-resized=\"containerResizedEvent\"\r\n                            @moved=\"movedEvent\"\r\n                            :style=\"dashboardIsEditMode ? 'border: 1px solid black;': 'border: 0px solid black;'\"\r\n                >\r\n                    <component :is=\"item.componentName\" \r\n                        :id=\"item.i\"  \r\n                        :config=\"item.config\"\r\n                        :subscriptions=\"item.subscriptions\"\r\n                        :h-px=\"item.hPx\" :w-px=\"item.wPx\" \r\n                        :show-config-cog=\"dashboardIsEditMode\"\r\n                        @update-subscriptions=\"UpdateSubscriptions\"\r\n                        @on-save=\"SaveConfig\">\r\n                    >\r\n                    <\/component>\r\n\r\n                    <i v-if=\"dashboardIsEditMode\" class=\"fa-light fa-trash-xmark\" style=\"cursor: pointer; transform: translate(3px,-21px);\" @click=\"removeStepFromGrid(item.i)\"><\/i>\r\n            <\/GridItem>\r\n        <\/GridLayout>\r\n    <\/div>\r\n<\/div>\r\n\r\n<script>\r\n    var WinDoc = window.document;\r\n    WinDoc.body.style.overflowX = \"hidden\";\r\n\r\n    \/\/ this is the coolest delay function ever\r\n    \/\/ use like this to wait 100ms: await delay(100);\r\n    \/\/ https:\/\/levelup.gitconnected.com\/how-to-turn-settimeout-and-setinterval-into-promises-6a4977f0ace3\r\n    function delay(time) {\r\n        return new Promise(resolve => setTimeout(resolve, time));\r\n    }\r\n\r\n    \/\/ we need a clipboard so we can copy \/ paste\r\n    var clipboard = navigator.clipboard;\r\n\r\n    function Panel(aComponentName, aTypeFqn, aLabel, aConfig, aSubscriptions, aW, aH){\r\n        this.componentName = aComponentName;\r\n        this.typeFqn = aTypeFqn;\r\n        this.config = aConfig;\r\n        this.subscriptions = aSubscriptions;\r\n        this.i= aLabel.replaceAll(' ', '') + '_' + crypto.randomUUID().split('-')[0];\r\n        this.x= 30;\r\n        this. y= 0;\r\n        this.w= aW;\r\n        this.wPx= 0;\r\n        this.h= aH;\r\n        this.hPx= 0;\r\n        this.moved= false;\r\n    }\r\n\r\n    var appJson = {\r\n        components: {\r\n           GridLayout: VueGridLayout.GridLayout,\r\n           GridItem: VueGridLayout.GridItem\r\n        },\r\n        data() {\r\n            return {\r\n                context:<?php echo json_encode($context)?>,\r\n                tabTitle: <?php echo json_encode($tabTitle)?>,\r\n                pageTitle: <?php echo json_encode($pageTitle)?>,\r\n                layout: [],\r\n                dashboardIsEditMode: false,\r\n                widgets: <?php echo json_encode($widgetsLight)?>,\r\n                widgetCategories: <?php echo json_encode($widgetCategories->enumeration_names)?>,\r\n                subscriptions:{}\r\n            }\r\n        },\r\n        mounted: async function(){\r\n            WinDoc.title = this.tabTitle;\r\n\r\n            let aConfig = await DashboardSdk.LoadDashboardAsync(this.context.std_inputs.node_id);\r\n\r\n            this.pageTitle = aConfig.pageTitle;\r\n            this.tabTitle = aConfig.tabTitle;\r\n            this.layout = aConfig.layout;\r\n            this.FillSubscriptionsRunner();\r\n        },\r\n        watch: {\r\n            tabTitle: function(a,b){\r\n                WinDoc.title = this.tabTitle;\r\n            }\r\n        },\r\n        methods: {\r\n            CopyLayoutToClipboard: function(){\r\n                clipboard.writeText(JSON.stringify(this.layout, null, 2));\r\n            },\r\n            PasteLayoutFromClipboard: async function(){\r\n                this.layout = JSON.parse(await clipboard.readText());\r\n            },\r\n            FillSubscriptionsRunner: async function(){\r\n                \/\/ this is a routine that calls itself every 10sec\r\n\r\n                let attrIds = Object.values(this.subscriptions).map(x=>x.attrIds).flat().filter(x=>x).filter(x=>Number.isInteger(parseInt(x)));\r\n                if(attrIds.length>0){\r\n                    await this.FillSubscriptions();\r\n                }\r\n                await delay(10000);\r\n                this.FillSubscriptionsRunner();\r\n            },\r\n\r\n            FillSubscriptions: async function(aSingleSubscription=null){\r\n                \/\/ one tag: \/index.php?option=com_thinkiq&task=node.show&node_id=11342607\r\n                \/\/ multiple tags: \/index.php?option=com_thinkiq&task=node.getLiveData&ids=11342603,11342607&getTimeSeriesData=0\r\n                let ids = [];\r\n                let aSingleSubscriptionKey = aSingleSubscription==null ? '' : Object.keys(aSingleSubscription)[0];\r\n                if(aSingleSubscription==null){\r\n                    \/\/ use filter(x=>x) to filter out 'undefined'\r\n                    \/\/ use filter(x=>Number.isInteger(parseInt(x))) to make sure the attrIds are numberic\r\n                    ids = Object.values(this.subscriptions).map(x=>x.attrIds).flat().filter(x=>x).filter(x=>Number.isInteger(parseInt(x)));\r\n                } else {\r\n                    ids = this.subscriptions[aSingleSubscriptionKey].attrIds.filter(x=>x).filter(x=>Number.isInteger(parseInt(x)));\r\n                }\r\n                \/\/ use a set to remove duplicate attrIds\r\n                ids = [... new Set(ids)];\r\n                \r\n                if(ids.length>0){\r\n                    \/\/ batch call for current_values\r\n                    let aResponse = await fetch(`\/index.php?option=com_thinkiq&task=node.getLiveData&ids=${ids.join(',')}&getTimeSeriesData=0`);\r\n                    let aData = await aResponse.json();\r\n                    \/\/ console.log(aData);\r\n\r\n                    Object.keys(this.subscriptions).forEach(aKey => {\r\n                        \/\/ go through all subscriptions\r\n                        let aSubscription = this.subscriptions[aKey];\r\n                        if(aSingleSubscription==null || aKey == aSingleSubscriptionKey){\r\n                            let subscriptions = {};\r\n                            \/\/ go through all attrIds the subscription is good for and compile subscriptions object\r\n                            \/\/ the subscriptionProps are the keys to the object\r\n                            \/\/ vst are the values\r\n                            for(let i=0; i<aSubscription.attrIds.length; i++){\r\n                                if(aSubscription.attrIds[i]){\r\n                                    let aRecord = aData.data.find(x=>x.id==aSubscription.attrIds[i]);\r\n                                    if(aRecord){\r\n                                        subscriptions[aSubscription.subscriptionProps[i]] = {\r\n                                            v: aRecord.current_value,\r\n                                            s: aRecord.current_status,\r\n                                            t: aRecord.current_timestamp\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            \/\/ mutating the subscriptions object on the widget will trigger an update of the UI\r\n                            this.layout.find(x=>x.i==aKey).subscriptions = subscriptions;\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            UpdateSubscriptions: async function(aSubscription){\r\n                \/\/ this is a callback from a component that needs to update\/register a subscription\r\n\r\n                let aSubscriptionKey = Object.keys(aSubscription)[0];\r\n                let aSubscriptionValue = aSubscription[aSubscriptionKey];\r\n                \/\/ console.log('update subscription', aSubscription);\r\n                if(!Object.keys(this.subscriptions).includes(aSubscriptionKey)){\r\n                    \/\/ if this component doesn't have a key in the subscription object yet, create it\r\n                    this.subscriptions[aSubscriptionKey] = {};\r\n                }\r\n\r\n                this.subscriptions[aSubscriptionKey].attrIds = aSubscriptionValue.attrIds;\r\n                this.subscriptions[aSubscriptionKey].subscriptionProps = aSubscriptionValue.subscriptionProps;\r\n\r\n                \/\/ fill the subscription right away\r\n                await this.FillSubscriptions(aSubscription);\r\n\r\n            },\r\n            ToggleViewMode: function(){\r\n                this.dashboardIsEditMode = !this.dashboardIsEditMode;\r\n            },\r\n            AddWidget: function(aWidget){\r\n                let newPanel = new Panel(aWidget.componentName, aWidget.fqn, aWidget.label, {}, {}, 10, 3);\r\n                this.layout.push(newPanel);\r\n            },\r\n            SaveDashboardAsync: async function(){\r\n                await DashboardSdk.SaveDashboardAsync(this.context.std_inputs.node_id, this.layout, this.pageTitle, this.tabTitle);\r\n            },\r\n            SaveConfig: function(e){\r\n                \/\/ console.log(e);\r\n                this.layout.find(x=>x.i==e.id).config=e.config;\r\n            },\r\n            removeStepFromGrid: function(val){\r\n                const index = this.layout.map(item => item.i).indexOf(val);\r\n                this.layout.splice(index, 1);\r\n            },\r\n            moveEvent: function(i, newX, newY){\r\n                const msg = \"MOVE i=\" + i + \", X=\" + newX + \", Y=\" + newY;\r\n                \/\/ this.eventLog.push(msg);\r\n                console.log(msg);\r\n            },\r\n            movedEvent: function(i, newX, newY){\r\n                const msg = \"MOVED i=\" + i + \", X=\" + newX + \", Y=\" + newY;\r\n                \/\/ this.eventLog.push(msg);\r\n                console.log(msg);\r\n            },\r\n            resizeEvent: function(i, newH, newW, newHPx, newWPx){\r\n                const msg = \"RESIZE i=\" + i + \", H=\" + newH + \", W=\" + newW + \", H(px)=\" + newHPx + \", W(px)=\" + newWPx;\r\n                this.layout.find(x=>x.i==i).wPx = newWPx;\r\n                this.layout.find(x=>x.i==i).hPx = newHPx;\r\n                console.log(msg);\r\n            },\r\n            resizedEvent: function(i, newX, newY, newHPx, newWPx){\r\n                const msg = \"RESIZED i=\" + i + \", X=\" + newX + \", Y=\" + newY + \", H(px)=\" + newHPx + \", W(px)=\" + newWPx;\r\n                this.layout.find(x=>x.i==i).wPx = newWPx;\r\n                this.layout.find(x=>x.i==i).hPx = newHPx;\r\n                console.log(msg);\r\n            },\r\n            containerResizedEvent: function(i, newH, newW, newHPx, newWPx){\r\n                const msg = \"CONTAINER RESIZED i=\" + i + \", H=\" + newH + \", W=\" + newW + \", H(px)=\" + newHPx + \", W(px)=\" + newWPx;\r\n                this.layout.find(x=>x.i==i).wPx = Number(newWPx);\r\n                this.layout.find(x=>x.i==i).hPx = Number(newHPx);\r\n                console.log(msg);\r\n            },\r\n            layoutCreatedEvent: function(newLayout){\r\n                \/\/ this.eventLog.push(\"Created layout\");\r\n                console.log(\"Created layout: \", newLayout)\r\n            },\r\n            layoutBeforeMountEvent: function(newLayout){\r\n                \/\/ this.eventLog.push(\"beforeMount layout\");\r\n                console.log(\"beforeMount layout: \", newLayout)\r\n            },\r\n            layoutMountedEvent: function(newLayout){\r\n                \/\/ this.eventLog.push(\"Mounted layout\");\r\n                console.log(\"Mounted layout: \", newLayout)\r\n            },\r\n            layoutReadyEvent: function(newLayout){\r\n                \/\/ this.eventLog.push(\"Ready layout\");\r\n                console.log(\"Ready layout: \", newLayout)\r\n            },\r\n            layoutUpdatedEvent: function(newLayout){\r\n                \/\/ this.eventLog.push(\"Updated layout\");\r\n                console.log(\"Updated layout: \", newLayout)\r\n            },\r\n        }\r\n    }\r\n     \r\n    var app = createApp(appJson);\r\n\r\n    let widgets = <?php echo json_encode($widgetsLight)?>;\r\n    \r\n    widgets.forEach(aWidget => {\r\n        app.component(aWidget.componentName, window[aWidget.componentName]);\r\n    });\r\n\r\n    app.mount('#app');\r\n<\/script>",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": null,
                    "edit_status": 1,
                    "output_type": "display",
                    "script_type": "php",
                    "display_name": "Dashboard",
                    "relative_name": "dashboard",
                    "initial_inputs": {
                        "start_timestamp": "2023-12-04T16:43:08.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-29T14:04:25.5984+00:00",
                    "max_acceptable_run_secs": 0,
                    "use_outputs_from_last_run": true
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": null,
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Page Title",
                    "default_value": "Fancy New Dashboard",
                    "relative_name": "page_title",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": null,
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Tab Title",
                    "default_value": "Fancy New Tab Title",
                    "relative_name": "tab_title",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "Dashboard",
            "opcua_methods": [],
            "relative_name": "dashboard",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "tiq_dash_boom_library",
                "tiq_dash_boom"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "sparkline"
            ],
            "scripts": [
                {
                    "run": false,
                    "owner": "GregorVilkner",
                    "script": "<script type=\"text\/x-template\" id=\"spark-line-component-template\">\r\n    <div style=\"height:100%; position:relative;\">\r\n        \r\n        <div v-if=\"showConfigCog\" style=\"position:absolute;top:0;right:3px;cursor:pointer;z-index:99;\">\r\n            <button type=\"button\" class=\"btn btn-sm btn-link\"  data-bs-toggle=\"modal\" :data-bs-target=\"`#modal_${id}`\">\r\n                <i class=\"fa-solid fa-cog\" :style=\"{color: configComplete ? 'green' : 'red'}\"><\/i>\r\n            <\/button>\r\n        <\/div>\r\n\r\n        <div class=\"display-6 ms-2 mb-2\" style=\"font-size=6rem;\">{{choosenSparkTitle}}<\/div>\r\n        <sparkline-chart\r\n\r\n            :key='sparklineKey'\r\n            :id='choosenAttrId'\r\n            :duration='isNaN(parseFloat(choosenDurationHours)) ? 1 * 60 * 60 : parseFloat(choosenDurationHours) * 60 * 60'\r\n            :offset='0'\r\n            :live-mode='true'\r\n            :refresh-interval='10'\r\n            \t\r\n            :show-x-axis='true'\r\n            :show-y-axis='true'\r\n            :show-border='false'\r\n            :show-tooltip='true'\r\n            :round-y-axis-to-significant-digit='1'\r\n            :min-range='isNaN(parseFloat(choosenYMin)) ? null : parseFloat(choosenYMin)'\r\n            :max-range='isNaN(parseFloat(choosenYMax)) ? null : parseFloat(choosenYMax)'\r\n            :x-ticks='10'\r\n            :y-ticks='5'\r\n            :height='hPx - 55'\r\n\r\n            :margin='{\r\n                \"top\": 19,\r\n                \"bottom\": 30,\r\n                \"left\": 30,\r\n                \"right\": 10\r\n            }'\r\n            \r\n        ><\/sparkline-chart>\r\n\r\n        <!-- Modal -->\r\n        <div class=\"modal\" :id=\"`modal_${id}`\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Sparkline Configuration<\/h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"><\/button>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"sparkTitleSelector\">SparkLine Title<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenSparkTitle\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"attrIdSelector\">Attribute Id<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenAttrId\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"attrIdSelector\">Duration (hours)<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenDurationHours\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"attrIdSelector\">Y-Axis max<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenYMax\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"attrIdSelector\">Y-Axis min<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenYMin\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Dismis + Close<\/button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" @click=\"SaveChoices\">Save + Close<\/button>\r\n                    <\/div>\r\n                <\/div>\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>\r\n<\/script>\r\n\r\n<script>\r\n    var WinDoc = window.document;\r\n\r\n    var sparkLineComponent = {\r\n        template: '#spark-line-component-template',\r\n        \/\/ props: ['id', 'config', 'showConfigCog'],\r\n        props: {\r\n            id: {\r\n                type: String,\r\n                default: crypto.randomUUID()\r\n            },\r\n            config:{\r\n                type: Object\r\n            },\r\n            hPx:{\r\n                type: Number\r\n            },\r\n            wPx:{\r\n                type: Number\r\n            },\r\n            showConfigCog:{\r\n                type: Boolean,\r\n                default: true\r\n            }\r\n        },\r\n        data() {\r\n            return { \r\n                configComplete: false,\r\n                choosenAttrId: '',\r\n                choosenDurationHours: '',\r\n                choosenYMax: '',\r\n                choosenYMin: '',\r\n                choosenSparkTitle: '',\r\n                sparklineKey: 0\r\n            }\r\n        },\r\n        watch:{\r\n            choosenDurationHours: function(beforeValue, afterValue){\r\n                this.sparklineKey++;\r\n            },\r\n            hPx: function(a,b){\r\n\r\n            },\r\n        },\r\n        mounted: async function(){\r\n            \r\n            this.choosenAttrId = this.config.attrId;\r\n            this.choosenDurationHours = this.config.durationHours;\r\n            this.choosenYMax = this.config.yMax;\r\n            this.choosenYMin = this.config.yMin;\r\n            this.choosenSparkTitle = this.config.sparkTitle;\r\n\r\n            this.configComplete = this.CheckConfigIsComplete();\r\n\r\n            const myModal = WinDoc.getElementById(`modal_${this.id}`)\r\n            myModal.addEventListener('shown.bs.modal', () => {\r\n                this.$emit('config-state-changed', {\r\n                    id: this.id,\r\n                    isConfig: true\r\n                });\r\n            })\r\n            myModal.addEventListener('hidden.bs.modal', () => {\r\n                this.$emit('config-state-changed', {\r\n                    id: this.id,\r\n                    isConfig: false\r\n                });\r\n            })\r\n        },\r\n        methods: {\r\n            CheckConfigIsComplete: function(){\r\n                if(this.choosenAttrId == '') return false;\r\n                if(this.choosenDurationHours == '') return false;\r\n                if(this.choosenYMax == '') return false;\r\n                if(this.choosenYMin == '') return false;\r\n                if(this.choosenSparkTitle == '') return false;\r\n\r\n                return true;\r\n            },\r\n            HideModal: function() {\r\n                $(`#modal_${this.id}`).modal('hide');\r\n            },\r\n            SaveChoices: function(){\r\n                this.$emit('on-save', {\r\n                    id: this.id,\r\n                    config: {\r\n                        attrId: this.choosenAttrId,\r\n                        durationHours: this.choosenDurationHours,\r\n                        yMax: this.choosenYMax,\r\n                        yMin: this.choosenYMin,\r\n                        sparkTitle: this.choosenSparkTitle\r\n                    }\r\n                });\r\n                this.HideModal();\r\n                this.configComplete = this.CheckConfigIsComplete();\r\n            },\r\n        }\r\n    }\r\n<\/script>",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": null,
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Component Template",
                    "relative_name": "component_template",
                    "initial_inputs": {
                        "start_timestamp": "2023-12-05T13:08:02.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-29T19:40:24.784114+00:00",
                    "max_acceptable_run_secs": 0,
                    "use_outputs_from_last_run": false
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "enumeration",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 20,
                    "description": "Allows categorizing of widgets to group them in the UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Category",
                    "default_value": "Charting",
                    "relative_name": "category",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:47.092286+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": [
                        "tiq_dash_boom_library",
                        "widget_categories"
                    ],
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": [
                        "Layouting",
                        "Charting",
                        "Media",
                        "HMI"
                    ],
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 30,
                    "description": "The Config Value is used on the type to specify the name of the vue component to be registered with the dashboard UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Component Name",
                    "default_value": "sparkLineComponent",
                    "relative_name": "component_name",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:57.186141+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 110,
                    "description": "The attribute id to be rendered using a sparkline.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:attrId",
                    "default_value": null,
                    "relative_name": "config_colon_attrid",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:45.808123+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 140,
                    "description": "Duration for sparkline. Non-numeric values will result in a 1-hour default.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:durationHours",
                    "default_value": "6",
                    "relative_name": "config_colon_durationhours",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T17:11:37.475153+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 100,
                    "description": "The title to be shown above the sparkline.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:sparkTitle",
                    "default_value": null,
                    "relative_name": "config_colon_sparktitle",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:40.743227+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 130,
                    "description": "Maximum value for the y-axis range. Non-numeric values will result in null, which will cause the y-axis to auto-scale.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:yMax",
                    "default_value": "100",
                    "relative_name": "config_colon_ymax",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T17:10:55.500984+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 120,
                    "description": "Minimum value for the y-axis range. Non-numeric values will result in null, which will cause the y-axis to auto-scale.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:yMin",
                    "default_value": "0",
                    "relative_name": "config_colon_ymin",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T17:10:49.939578+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 70,
                    "description": "The height of a widget (rows).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "H",
                    "default_value": null,
                    "relative_name": "h",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:22.109454+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": "fa-light fa-chart-waterfall",
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "The Config Value is used on the type to specify the label and icon to be used for the dashboard UI button to add a new widget of this type.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Label",
                    "default_value": "Sparkline Chart",
                    "relative_name": "label",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 60,
                    "description": "The width of a widget instance (columns).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "W",
                    "default_value": null,
                    "relative_name": "w",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:17.064015+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 40,
                    "description": "The x location (column, left to right) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "X",
                    "default_value": null,
                    "relative_name": "x",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:06.50753+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 50,
                    "description": "The y location (row, from the top down) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Y",
                    "default_value": null,
                    "relative_name": "y",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:12.296831+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "Sparkline",
            "opcua_methods": [],
            "relative_name": "sparkline",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "tiq_dash_boom_library",
                "widget"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "tiq_dash_boom"
            ],
            "scripts": [],
            "document": null,
            "attributes": [],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "TIQ Dash Boom",
            "opcua_methods": [],
            "relative_name": "tiq_dash_boom",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "thinkiq_base_library",
                "object"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "title"
            ],
            "scripts": [
                {
                    "run": false,
                    "owner": "GregorVilkner",
                    "script": "<script type=\"text\/x-template\" id=\"title-component-template\">\r\n    <div style=\"height:100%; position:relative;\">\r\n        \r\n        <div v-if=\"showConfigCog\" style=\"position:absolute;top:0;right:3px;cursor:pointer;z-index:99;\">\r\n            <button type=\"button\" class=\"btn btn-sm btn-link\"  data-bs-toggle=\"modal\" :data-bs-target=\"`#modal_${id}`\">\r\n                <i class=\"fa-solid fa-cog\" :style=\"{color: configComplete ? 'green' : 'red'}\"><\/i>\r\n            <\/button>\r\n        <\/div>\r\n\r\n        <div class=\"ms-2 display-6\">{{choosenTitle}}<\/div>\r\n\r\n\r\n        <!-- Modal -->\r\n        <div class=\"modal\" :id=\"`modal_${id}`\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Title Configuration<\/h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"><\/button>\r\n                    <\/div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group mb-3\">\r\n                            <label class=\"input-group-text\" for=\"titleSelector\">Title<\/label>\r\n                            <input type=\"text\" class=\"form-control\" v-model=\"choosenTitle\" placeholder=\"\" aria-label=\"\" aria-describedby=\"basic-addon1\">\r\n                        <\/div>\r\n                    <\/div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Dismis + Close<\/button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" @click=\"SaveChoices\">Save + Close<\/button>\r\n                    <\/div>\r\n                <\/div>\r\n            <\/div>\r\n        <\/div>\r\n    <\/div>\r\n<\/script>\r\n\r\n<script>\r\n    var WinDoc = window.document;\r\n\r\n    var titleComponent = {\r\n        template: '#title-component-template',\r\n        props: ['id', 'config', 'showConfigCog'],\r\n        data() {\r\n            return { \r\n\r\n                configComplete: false,\r\n                choosenTitle: ''\r\n            }\r\n        },\r\n        mounted: async function(){\r\n            \r\n            this.choosenTitle = this.config.title;\r\n\r\n            this.configComplete = this.CheckConfigIsComplete();\r\n\r\n            const myModal = WinDoc.getElementById(`modal_${this.id}`)\r\n            myModal.addEventListener('shown.bs.modal', () => {\r\n                this.$emit('config-state-changed', {\r\n                    id: this.id,\r\n                    isConfig: true\r\n                });\r\n            })\r\n            myModal.addEventListener('hidden.bs.modal', () => {\r\n                this.$emit('config-state-changed', {\r\n                    id: this.id,\r\n                    isConfig: false\r\n                });\r\n            })\r\n        },\r\n        computed: {\r\n            \r\n        },\r\n        methods: {\r\n\r\n            CheckConfigIsComplete: function(){\r\n                if(this.choosenTitle == '') return false;\r\n\r\n                return true;\r\n            },\r\n            HideModal: function() {\r\n                $(`#modal_${this.id}`).modal('hide');\r\n            },\r\n            SaveChoices: function(){\r\n                this.$emit('on-save', {\r\n                    id: this.id,\r\n                    config: {\r\n                        title: this.choosenTitle,\r\n                    }\r\n                });\r\n                this.HideModal();\r\n                this.configComplete = this.CheckConfigIsComplete();\r\n            },\r\n        }\r\n    }\r\n<\/script>\r\n",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": null,
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Component Template",
                    "relative_name": "component_template",
                    "initial_inputs": {
                        "start_timestamp": "2023-12-04T17:54:49.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "max_acceptable_run_secs": 0,
                    "use_outputs_from_last_run": false
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "enumeration",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 20,
                    "description": "Allows categorizing of widgets to group them in the UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Category",
                    "default_value": "Layouting",
                    "relative_name": "category",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:47.092286+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": [
                        "tiq_dash_boom_library",
                        "widget_categories"
                    ],
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": [
                        "Layouting",
                        "Charting",
                        "Media",
                        "HMI"
                    ],
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 30,
                    "description": "The Config Value is used on the type to specify the name of the vue component to be registered with the dashboard UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Component Name",
                    "default_value": "titleComponent",
                    "relative_name": "component_name",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:57.186141+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "The text to be displayed.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "config:title",
                    "default_value": null,
                    "relative_name": "config_colon_title",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 70,
                    "description": "The height of a widget (rows).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "H",
                    "default_value": null,
                    "relative_name": "h",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:22.109454+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": "fa-light fa-text",
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "The Config Value is used on the type to specify the label and icon to be used for the dashboard UI button to add a new widget of this type.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Label",
                    "default_value": "Title",
                    "relative_name": "label",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 60,
                    "description": "The width of a widget instance (columns).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "W",
                    "default_value": null,
                    "relative_name": "w",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:17.064015+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 40,
                    "description": "The x location (column, left to right) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "X",
                    "default_value": null,
                    "relative_name": "x",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:06.50753+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 50,
                    "description": "The y location (row, from the top down) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Y",
                    "default_value": null,
                    "relative_name": "y",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:12.296831+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "Title",
            "opcua_methods": [],
            "relative_name": "title",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "tiq_dash_boom_library",
                "widget"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "widget"
            ],
            "scripts": [],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "enumeration",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 20,
                    "description": "Allows categorizing of widgets to group them in the UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Category",
                    "default_value": null,
                    "relative_name": "category",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:47.092286+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": [
                        "tiq_dash_boom_library",
                        "widget_categories"
                    ],
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": [
                        "Layouting",
                        "Charting",
                        "Media",
                        "HMI"
                    ],
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 30,
                    "description": "The Config Value is used on the type to specify the name of the vue component to be registered with the dashboard UI.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Component Name",
                    "default_value": null,
                    "relative_name": "component_name",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:56:57.186141+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 70,
                    "description": "The height of a widget (rows).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "H",
                    "default_value": null,
                    "relative_name": "h",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:22.109454+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "The Config Value is used on the type to specify the label and icon to be used for the dashboard UI button to add a new widget of this type.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Label",
                    "default_value": null,
                    "relative_name": "label",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 60,
                    "description": "The width of a widget instance (columns).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "W",
                    "default_value": null,
                    "relative_name": "w",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:17.064015+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 40,
                    "description": "The x location (column, left to right) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "X",
                    "default_value": null,
                    "relative_name": "x",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:06.50753+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 50,
                    "description": "The y location (row, from the top down) of a widget instance.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Y",
                    "default_value": null,
                    "relative_name": "y",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-29T16:57:12.296831+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "Widget",
            "opcua_methods": [],
            "relative_name": "widget",
            "classification": "object",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "tiq_dash_boom_library",
                "tiq_dash_boom"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        }
    ],
    "objects": [],
    "libraries": [
        {
            "fqn": [
                "local_library"
            ],
            "locked": false,
            "models": null,
            "aliases": null,
            "version": "1.0.0",
            "document": null,
            "licensing": null,
            "extensions": null,
            "importance": null,
            "description": "The library storing type system locally",
            "edit_status": 1,
            "server_uris": null,
            "display_name": "Local Library",
            "relative_name": "local_library",
            "namespace_uris": null,
            "updated_timestamp": "2024-04-12T12:28:19.926665+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "thinkiq_base_library"
            ],
            "locked": true,
            "models": null,
            "aliases": null,
            "version": "1.7.0",
            "document": null,
            "licensing": "The ThinkIQ Base Library is copyright protected.",
            "extensions": null,
            "importance": 10,
            "description": "ThinkIQ Base Library",
            "edit_status": 1,
            "server_uris": null,
            "display_name": "ThinkIQ Base Library",
            "relative_name": "thinkiq_base_library",
            "namespace_uris": null,
            "updated_timestamp": "2023-11-21T22:48:19.085262+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library"
            ],
            "locked": false,
            "models": null,
            "aliases": null,
            "version": "1.0.0",
            "document": null,
            "licensing": null,
            "extensions": null,
            "importance": null,
            "description": null,
            "edit_status": 1,
            "server_uris": null,
            "display_name": "TIQ Dash Boom Library",
            "relative_name": "tiq_dash_boom_library",
            "namespace_uris": null,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false
        }
    ],
    "quantities": [],
    "relationships": [],
    "opcua_variables": [],
    "opcua_data_types": [],
    "script_templates": [
        {
            "fqn": [
                "tiq_dash_boom_library",
                "dashboard_js_sdk"
            ],
            "run": false,
            "owner": "GregorVilkner",
            "script": "<?php\r\n\r\n\/\/ lookup the dashboard_php_api script\r\n\/\/ we need the file name to make web requests\r\n\r\n$dashboard_php_api = new TiqUtilities\\Model\\Script('tiq_dash_boom_library.dashboard_php_api');\r\n$dashboard_php_api_file_name = $dashboard_php_api->script_file_name;\r\n\r\n?>\r\n\r\n<script>\r\n\r\n    const GetDashboardPhpApiJsonResponseAsync = async (aFunctionName, aArgument) => {\r\n\r\n        \/\/ typical boiler plate to make a web request to a php script file\r\n        let apiRoute = `\/index.php?option=com_thinkiq&task=invokeScript`;\r\n        let settings = { method: 'POST', headers: {} };\r\n        let formData = new FormData();\r\n        formData.append('script_name', '<?php echo $dashboard_php_api_file_name; ?>');\r\n        formData.append('output_type', 'browser');\r\n        formData.append('function', aFunctionName);\r\n        formData.append('argument', JSON.stringify(aArgument));\r\n        settings.body = formData;\r\n        let aResponse = await fetch(apiRoute, settings);\r\n        let aResponseData = await aResponse.json();\r\n        return aResponseData.data;\r\n\r\n    };\r\n\r\n    var DashboardSdk = {\r\n\r\n        EchoAsync: async function(a = null){\r\n            \/\/ returns what is put in: string, numbers, json\r\n            let argument={\r\n                hello: a\r\n            };\r\n            return await GetDashboardPhpApiJsonResponseAsync('Echo', { hello : a });\r\n        },\r\n\r\n        SaveDashboardAsync: async function(aId, aLayout, aPageTitle, aTabTitle){\r\n            let argument={\r\n                id: aId,\r\n                layout: aLayout,\r\n                pageTitle: aPageTitle,\r\n                tabTitle: aTabTitle\r\n            };\r\n            return await GetDashboardPhpApiJsonResponseAsync('SaveDashboard', argument);\r\n        },\r\n\r\n        LoadDashboardAsync: async function(aId){\r\n            let argument={\r\n                id: aId\r\n            };\r\n            return await GetDashboardPhpApiJsonResponseAsync('LoadDashboard', argument);\r\n        }\r\n\r\n    }\r\n\r\n<\/script>",
            "document": {
                "template": false
            },
            "importance": null,
            "description": null,
            "edit_status": 1,
            "output_type": "headless",
            "script_type": "php",
            "display_name": "Dashboard JS SDK",
            "relative_name": "dashboard_js_sdk",
            "initial_inputs": {
                "start_timestamp": "2023-12-05T15:54:35.000+00:00",
                "interval_seconds": "60"
            },
            "cron_expression": "0 * * * * ? *",
            "exec_on_derived": false,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "max_acceptable_run_secs": 0,
            "use_outputs_from_last_run": false
        },
        {
            "fqn": [
                "tiq_dash_boom_library",
                "dashboard_php_api"
            ],
            "run": false,
            "owner": "GregorVilkner",
            "script": "<?php\r\n\r\nuse Joomla\\CMS\\Response\\JsonResponse;\r\nuse TiqUtilities\\Model\\Node;\r\nuse TiqUtilities\\Model\\Type;\r\nuse TiqUtilities\\Model\\GenericObject;\r\n\r\n\r\nrequire_once 'thinkiq_context.php';\r\n$context = new Context();\r\n\r\n$f = isset($context->std_inputs->function) ? $context->std_inputs->function : '';\r\n$a = isset($context->std_inputs->argument) ? json_decode($context->std_inputs->argument) : '';\r\n\r\nfunction PostgresArrayToPhpArray($postgresArray){\r\n    return (fn () => $this->convertPostgresTypeArray($postgresArray))->call(new Node()); \r\n}\r\n\r\n\r\nswitch ($f){\r\n\r\n    case \"Echo\":\r\n\r\n        $returnObject = $a->hello == null ? \"Hello Echo.\" : $a->hello;\r\n        die(new JsonResponse($returnObject));\r\n\r\n    case \"LoadDashboard\":\r\n\r\n    \/\/ function Panel(aType, aTypeId, aLabel, aConfig, aW, aH){\r\n    \/\/ x    this.type = aType;\r\n    \/\/ x    this.typeFqn = PostgresArrayToPhpArray(aType->fqn)\r\n    \/\/ x    this.config=aConfig;\r\n    \/\/ x    this.i= aLabel.replaceAll(' ', '') + '_' + crypto.randomUUID().split('-')[0];\r\n    \/\/ x    this.x= 30;\r\n    \/\/ x    this. y= 0;\r\n    \/\/ x    this.w= aW;\r\n    \/\/ x    this.wPx= 0;\r\n    \/\/ x    this.h= aH;\r\n    \/\/ x    this.hPx= 0;\r\n    \/\/ x    this.moved= false;\r\n    \/\/ }\r\n\r\n\r\n        $aId = $a->id;\r\n        $aHost = new Node($aId);\r\n        $aHost->getChildren();\r\n\r\n        $aLayout = [];\r\n        foreach($aHost->children as $aWidget){\r\n            $aWidget->getAttributes();\r\n            $aGridItem = [];\r\n\r\n            \/\/ identifier and typeId of the widget\r\n            $aGridItem['i'] = $aWidget->display_name;\r\n            $aGridItem['typeFqn'] = explode('.', (new Node($aWidget->type_id))->getFqn());\r\n\r\n            \/\/ lookup the type to get the type id\r\n            $widgetType = new Type($aWidget->type_id);\r\n            $widgetType->getAttributes();\r\n            $aGridItem['componentName'] = $widgetType->attributes['component_name']->default_string_value;\r\n\r\n            \/\/ position and size of widget\r\n            $intProps = ['x', 'y', 'w', 'h'];\r\n            foreach($intProps as $aProp){\r\n                $aGridItem[$aProp] = (int)$aWidget->attributes[$aProp]->int_value;\r\n            }\r\n\r\n            \/\/ those are required by vue-grid-layout\r\n            $aGridItem['wPx'] = 0;\r\n            $aGridItem['hPx'] = 0;\r\n            $aGridItem['moved'] = false;\r\n\r\n            \/\/ config props\r\n            $aConfig = [];\r\n            foreach($aWidget->attributes as $aAttribute){\r\n                if(str_starts_with($aAttribute->display_name, 'config:')){\r\n                    $stringBits = explode(':', $aAttribute->display_name);\r\n\r\n                    switch($aAttribute->data_type){\r\n                        case 'string':\r\n                            $aConfig[$stringBits[1]] = $aAttribute->string_value; \r\n                            break;\r\n                        case 'int':\r\n                            $aConfig[$stringBits[1]] = $aAttribute->int_value; \r\n                            break;\r\n                        case 'float':\r\n                            $aConfig[$stringBits[1]] = $aAttribute->float_value; \r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            $aGridItem['config'] = (object)$aConfig;\r\n\r\n\r\n            $aLayout[] = (object)$aGridItem;\r\n        }\r\n\r\n        $aResponseObject = [];\r\n        $aResponseObject['layout'] = $aLayout;\r\n\r\n        $aHost->getAttributes();\r\n        $aResponseObject['pageTitle'] = $aHost->attributes['page_title']->string_value;\r\n        $aResponseObject['tabTitle'] = $aHost->attributes['tab_title']->string_value;\r\n\r\n        die(new JsonResponse((object)$aResponseObject));\r\n\r\n\r\n    case \"SaveDashboard\":\r\n\r\n        $aId = $a->id;\r\n        $aLayout = $a->layout;\r\n        $aPageTitle = $a->pageTitle;\r\n        $aTabTitle = $a->tabTitle;\r\n\r\n        $aHost = new Node($aId);\r\n\r\n        \/\/ save page and tab title\r\n        $aHost->getAttributes();\r\n        $aHost->attributes['page_title']->string_value = $aPageTitle;\r\n        $aHost->attributes['page_title']->save();\r\n        $aHost->attributes['tab_title']->string_value = $aTabTitle;\r\n        $aHost->attributes['tab_title']->save();\r\n\r\n\r\n        $aHost->getChildren();\r\n        \/\/ get a dictionary of existing widgets key: relative name, value: display_name\r\n        $existingWidgets = array_map(function($aItem){return $aItem->display_name;}, $aHost->children);\r\n\r\n        foreach($aLayout as $aGridItem){\r\n            \r\n\r\n\r\n            \/\/ create instance of widget type if needed\r\n            if(!in_array($aGridItem->i, $existingWidgets)){\r\n                $aWidget = new GenericObject();\r\n                $aWidget->display_name = $aGridItem->i;\r\n                $aWidget->type_id = (new Type(implode('.', $aGridItem->typeFqn)))->id;\r\n                $aWidget->part_of_id=$aHost->id;\r\n                $aWidget->save();\r\n            } else {\r\n                $aWidget = new GenericObject($aHost->children[array_search($aGridItem->i, $existingWidgets)]->id);\r\n            }\r\n\r\n            \/\/ populate attributes\r\n            $aWidget->getAttributes();\r\n\r\n            \/\/ position and size of widget\r\n            $intProps = ['x', 'y', 'w', 'h'];\r\n            foreach($intProps as $aProp){\r\n                $aWidget->attributes[$aProp]->int_value = $aGridItem->$aProp; \r\n                $aWidget->attributes[$aProp]->save();\r\n            }\r\n\r\n            \/\/ config props\r\n            foreach($aWidget->attributes as $aAttribute){\r\n                if(str_starts_with($aAttribute->display_name, 'config:')){\r\n                    $stringBits = explode(':', $aAttribute->display_name);\r\n\r\n                    switch($aAttribute->data_type){\r\n                        case 'string':\r\n                            $aAttribute->string_value = $aGridItem->config->{$stringBits[1]}; \r\n                            break;\r\n                        case 'int':\r\n                            $aAttribute->int_value = $aGridItem->config->{$stringBits[1]}; \r\n                            break;\r\n                        case 'float':\r\n                            $aAttribute->float_value = (float)$aGridItem->config->{$stringBits[1]}; \r\n                            break;\r\n                    }\r\n                    $aAttribute->save();\r\n                }\r\n            }\r\n            \r\n            \r\n        }\r\n\r\n        \/\/ remove widgets that aren't in the dashboard\r\n        $aHost->getChildren();\r\n        $gridItemNames = array_map(function($aGridItem){return $aGridItem->i;}, $aLayout);\r\n        foreach($aHost->children as $aWidget){\r\n            if(!in_array($aWidget->display_name , $gridItemNames)){\r\n                $aWidget->delete();\r\n            }\r\n        }\r\n\r\n        $returnObject = \"Dashboard saved.\";\r\n        die(new JsonResponse($returnObject));\r\n        \r\n    default:\r\n\r\n        $returnObject = \"This function does not exist.\";\r\n        die(new JsonResponse($returnObject));\r\n\r\n}\r\n\r\n?>",
            "document": {
                "template": false
            },
            "importance": null,
            "description": null,
            "edit_status": 1,
            "output_type": "headless",
            "script_type": "php",
            "display_name": "Dashboard PHP API",
            "relative_name": "dashboard_php_api",
            "initial_inputs": {
                "start_timestamp": "2023-12-05T15:54:09.000+00:00",
                "interval_seconds": "60"
            },
            "cron_expression": "0 * * * * ? *",
            "exec_on_derived": false,
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "max_acceptable_run_secs": 0,
            "use_outputs_from_last_run": false
        }
    ],
    "enumeration_types": [
        {
            "fqn": [
                "tiq_dash_boom_library",
                "widget_categories"
            ],
            "document": null,
            "description": "Allows grouping of widgets by category.",
            "edit_status": 1,
            "display_name": "Widget Categories",
            "relative_name": "widget_categories",
            "opcua_type_ids": null,
            "enumeration_names": [
                "Layouting",
                "Charting",
                "Media",
                "HMI"
            ],
            "updated_timestamp": "2024-02-28T14:21:13.282324+00:00",
            "unlink_relative_name": false,
            "enumeration_color_codes": [
                "#000000",
                "#000000",
                "#000000",
                "#000000"
            ],
            "enumeration_descriptions": [
                "",
                "",
                "",
                ""
            ],
            "default_enumeration_values": [
                "Layouting",
                "Charting",
                "Media",
                "HMI"
            ]
        }
    ],
    "measurement_units": [],
    "relationship_types": [],
    "opcua_variable_types": [],
    "opcua_reference_types": []
}
